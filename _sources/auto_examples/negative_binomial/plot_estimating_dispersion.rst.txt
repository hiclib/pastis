
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/negative_binomial/plot_estimating_dispersion.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_negative_binomial_plot_estimating_dispersion.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_negative_binomial_plot_estimating_dispersion.py:


===================================
Estimating the dispersion parameter
===================================

Here, we show how to estimate the dispersion parameter with Pastis.

.. GENERATED FROM PYTHON SOURCE LINES 8-16

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    from iced import datasets
    import iced
    from pastis import dispersion









.. GENERATED FROM PYTHON SOURCE LINES 17-18

Load a Yeast dataset, and a human dataset

.. GENERATED FROM PYTHON SOURCE LINES 18-21

.. code-block:: default


    counts, lengths = datasets.load_sample_yeast()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/share/miniconda3/envs/pastis/lib/python3.9/site-packages/iced/io/_io_pandas.py:56: UserWarning: Attempting to guess whether counts are 0 or 1 based
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 22-24

Normalize the contact count data, but keep the biases to estimate the
dispersion

.. GENERATED FROM PYTHON SOURCE LINES 24-30

.. code-block:: default


    counts = iced.filter.filter_low_counts(counts, percentage=0.06)
    normed_counts, biases = iced.normalization.ICE_normalization(
        counts,
        output_bias=True)








.. GENERATED FROM PYTHON SOURCE LINES 31-35

Now, estimate the variance and mean for every genomic distance

Note that in order to have an unbiased estimation of the variance, you need
to provide the bias vector.

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: default


    _, mean, variance, weights = dispersion.compute_mean_variance(
        counts, lengths, bias=biases)








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Now, estimate a constant and a functional dispersion parameter.

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: default


    cst_disp = dispersion.ExponentialDispersion(degree=0)
    cst_disp.fit(mean, variance, sample_weights=weights**0.5)

    fun_disp = dispersion.ExponentialDispersion(degree=1)
    fun_disp.fit(mean, variance, sample_weights=weights**0.5)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pastis.dispersion.ExponentialDispersion object at 0x7fbba9e36820>



.. GENERATED FROM PYTHON SOURCE LINES 49-50

Plot the dispersion as a function of the mean

.. GENERATED FROM PYTHON SOURCE LINES 50-64

.. code-block:: default


    fig, ax = plt.subplots()
    ax.plot(mean, cst_disp.predict(mean), label="constant")
    ax.plot(mean, fun_disp.predict(mean), label="functional")
    ax.legend()

    ax.set_xlabel("Mean", fontweight="bold")
    ax.set_ylabel("Dispersion", fontweight="bold")
    ax.set_title("Estimating a dispersion parameter", fontweight="bold")
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')




.. image:: /auto_examples/negative_binomial/images/sphx_glr_plot_estimating_dispersion_001.png
    :alt: Estimating a dispersion parameter
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.201 seconds)


.. _sphx_glr_download_auto_examples_negative_binomial_plot_estimating_dispersion.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/hiclib/pastis/gh-pages?urlpath=lab/tree/notebooks/auto_examples/negative_binomial/plot_estimating_dispersion.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_estimating_dispersion.py <plot_estimating_dispersion.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_estimating_dispersion.ipynb <plot_estimating_dispersion.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
